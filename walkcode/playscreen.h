// *************************************************************************
// *                         Cinematix Revenant                            *
// *                    Copyright (C) 1998 Cinematix                       *
// *               playscreen.h - logo screen include file                 *
// *************************************************************************

#ifndef _PLAYSCREEN_H
#define _PLAYSCREEN_H

#ifndef _REVENANT_H
#include "revenant.h"
#endif

#ifndef _SCREEN_H
#include "screen.h"
#endif

#ifndef _GRAPHICS_H
#include "graphics.h"
#endif

#define MAXPOSTCHARANIMS	30

// Game control commands (generated by mouse, keyboard, and joystick)
// Note: commands are processed in 

typedef enum {
	GAMECMD_NONE, 
	GAMECMD_COMBAT, GAMECMD_FULLSCREEN,
	GAMECMD_USE, GAMECMD_GET, GAMECMD_JUMP, GAMECMD_INVENTORY,
	GAMECMD_INVOKE1, GAMECMD_INVOKE2, GAMECMD_INVOKE3, GAMECMD_INVOKE4,
	GAMECMD_INVUSE, GAMECMD_INVMOVE, GAMECMD_INVDROP, GAMECMD_INVEXIT,
	GAMECMD_SWING, GAMECMD_THRUST, GAMECMD_CHOP, 
	GAMECMD_COMBO1, GAMECMD_COMBO2, GAMECMD_COMBO3,
	GAMECMD_COMBO4, GAMECMD_COMBO5, GAMECMD_COMBO6,
	GAMECMD_BLOCK, GAMECMD_DODGE,  
	GAMECMD_DIRDOWN, GAMECMD_DIRUP,				// Dir flag commands (See CMDFLAG_ below)
	GAMECMD_MOVEDOWN, GAMECMD_MOVEUP,			// Move mode flag commands (See CMDFLAG_ below)
	GAMECMD_LEAPDOWN, GAMECMD_LEAPUP			// Combat leap mode flag command (See CMDFLAG_ below)
} GAMECOMMAND;

#define CMDFLAG_UPRIGHT		(1<<0)
#define CMDFLAG_RIGHT		(1<<1)
#define CMDFLAG_DOWNRIGHT	(1<<2)
#define CMDFLAG_DOWN		(1<<3)
#define CMDFLAG_DOWNLEFT	(1<<4)
#define CMDFLAG_LEFT		(1<<5)
#define CMDFLAG_UPLEFT		(1<<6)
#define CMDFLAG_UP			(1<<7)
#define CMDFLAG_RUN			(1<<8)
#define CMDFLAG_SNEAK		(1<<9)
#define CMDFLAG_LEAP		(1<<10)

#define CMDFLAG_DIRFLAGS	(0xFF)
#define CMDFLAG_MOVEFLAGS   (0x300)

// Daytime flags
#define DAY_MIDNIGHT 0
#define DAY_MORNING  1
#define DAY_DAYTIME  2
#define DAY_NOON     3
#define DAY_EVENING  4
#define DAY_NIGHT    5

_CLASSDEF(TPlayScreen)

class TPlayScreen : public TScreen
{
  public:
	TPlayScreen();
	
	virtual BOOL Initialize();
	  // Initializes the screen.
	virtual void Close();
	  // Closes the screen.
	
	virtual void DrawBackground();
	  // Draws to background before animation is drawm
	virtual void Pulse();
	  // Called to pulse the game AI
	virtual void Animate(BOOL draw);
	  // Animate function called every timer tick.
	virtual void MouseClick(int button, int x, int y);
	  // Mouse clicks
	virtual void KeyPress(int key, BOOL down);
	  // Handles keyboard presses. Calls TPane KeyPress functions.
	virtual void Joystick(int key, BOOL down);
	  // Handles joystick button presses. Calls TPane KeyPress functions.
	virtual void Command(GAMECOMMAND command);
	  // Called by various input functions to process commands

	static PTScreen ShowScreen(PTScreen screen, int ticks);
	  // Shows screen

	void AddPostCharAnim(int x, int y, int z, PTBitmap bm, DWORD drawmode, int dim = 0)
		{ if ((DWORD)numpostcharanims < MAXPOSTCHARANIMS)
			{ int n = numpostcharanims++; postanim[n].x = x; postanim[n].y = y;
				postanim[n].z = z; postanim[n].bm = bm; postanim[n].drawmode = drawmode; 
				postanim[n].dim = dim; } }
	  // Add a bitmap to be drawn after the 3d scene

	void AddPostCharText(char *t, int x, int y, PSColor color, int wrapwidth)
		{ if ((DWORD)numpostchartexts < MAXPOSTCHARANIMS)
			{ int n = numpostchartexts++; posttext[n].text = strdup(t);
				posttext[n].x = x; posttext[n].y = y; memcpy(&posttext[n].color, color, sizeof(SColor));
				posttext[n].wrapwidth = wrapwidth; } }
	  // Add some text to be drawn after the 3d scene

	void CreateBackgroundAreas();
	  // Create normal interface update areas
	void DrawOverhangs(BOOL temporary = FALSE);
	  // Draw the mappane overhang bitmaps

	BOOL IsFullScreen()
	  { return fullscreen; }
	  // Returns fullscreen state
	void SetFullScreen(BOOL on);
	  // Sets or clears fullscreen mode

	BOOL IsDemoMode()
	  { return demomode; }
	  // Is game in demo mode
	void SetDemoMode(BOOL on);
	  // Sets game to run in demo mode

	BOOL IsControlOn()
	  { return controlon; }
	  // Is game control on or off
	void SetControlOn(BOOL on);
	  // Sets game control on or off

	void MultiUpdate() { multidirty = TRUE; }
	  // Update overhangs on the multipane.

	void SetNextPane(PTPane pane) { nextpane = pane; }
	  // Set the pane to be initialized at the start of the next frame

	void HideLowerPanes();
	void ShowLowerPanes();
	  // Hide and show the panes at the bottom of the interface (inventory etc)

	void NewGame();
	  // Cause system to begin a new game

	void SaveMap();
	  // Cause system to begin a new game

  // Game time stuff
	int GameFrame();
	  // Returns the number of frames elapsed since the beginning of the current game.
	  // This value is saved in the save game file, and restored whenever a game is loaded.
	int GameTime();
	  // This is the time in hundredths of a second since the beginning of the current game.  This
	  // gets saved and restored in the save game file as well.  This time is calculated 
	  // not by the system clock, but by dividing the FrameCount() value by the number 
	  // by the game's frame rate.
	void SetGameTime(int gametime);
	  // Set the game time.  This is called from the save game/new game sytem.
	int TimeOfDay();
	  // Returns the time of day in minutes
	int Daylight();
	  // Returns a 0-255 total daylight ambient brightness value based on game time
	int DayTimeFlag();
	  // Returns a DAY_MIDNIGHT, DAY_MORNING, DAY_DAYTIME, DAY_NOON, DAY_EVENING, DAY_NIGHT, flags

  private:
	struct { int x, y, z; PTBitmap bm; DWORD drawmode; int dim; } postanim[MAXPOSTCHARANIMS];
	int numpostcharanims;				// spell effects etc

	struct { char *text; int x, y; SColor color; int wrapwidth; } posttext[MAXPOSTCHARANIMS];
	int numpostchartexts;				// characters talking

	BOOL interfacedirty;				// when the whole thing needs update
	BOOL multidirty;					// when multipane needs overhang update
	BOOL fullscreen;					// Is game in full screen mode
	BOOL demomode;						// Is game in demo mode
	BOOL controlon;						// Is game control on or off
	BOOL loadnewgame;					// Causes screen to load a new game when set
	BOOL savemap;						// Causes screen to save current map on next refresh

	int gameframes;						// Number of frames since PlayScreen started (only in game mode)
	int sessionstart;					// Copy of gameframes last time SetGameTime was called
	int lastsessionframes;				// Number of game frames in previous game session
	int gametime;						// Current game time in 100ths of a second
	int timeofday;						// Current time of day in GAME (not real) minutes

	PTPane nextpane;					// pane to add at start of next frame
};

int ConvertFramesToMinutes(int fames);
  // Conversion function to convert game minutes (not real minutes) to frames
int ConvertMinutesToFrames(int time);
  // Conversion function to convert frames to game minutes (not real minutes)

#endif
